
Gerne erkläre ich den Python-Code Schritt für Schritt, damit Sie alles gut verstehen.

### Importieren der Module

```python
import json
import os
import re
from datetime import datetime, timedelta
```

- **json**: Zum Laden und Speichern von JSON-Dateien.
- **os**: Zum Überprüfen, ob eine Datei existiert.
- **re**: Zum Validieren von E-Mail-Adressen und Telefonnummern mittels regulärer Ausdrücke.
- **datetime, timedelta**: Zum Arbeiten mit Datums- und Zeitwerten.

### Dateipfade

```python
CONTACTS_FILE = 'contacts.json'
NOTES_FILE = 'notes.json'
```

- **CONTACTS_FILE**: Pfad zur JSON-Datei, die Kontakte speichert.
- **NOTES_FILE**: Pfad zur JSON-Datei, die Notizen speichert.

### Funktionen zum Laden und Speichern von Daten

```python
def load_data(file):
    if os.path.exists(file):
        with open(file, 'r') as f:
            return json.load(f)
    return []

def save_data(data, file):
    with open(file, 'w') as f:
        json.dump(data, f, indent=4)
```

- **load_data(file)**: Lädt Daten aus einer JSON-Datei. Wenn die Datei nicht existiert, wird eine leere Liste zurückgegeben.
- **save_data(data, file)**: Speichert Daten in einer JSON-Datei mit Einrückungen für bessere Lesbarkeit.

### Validierungsfunktionen

```python
def validate_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

def validate_phone(phone):
    return re.match(r"^\+?1?\d{9,15}$", phone)
```

- **validate_email(email)**: Überprüft, ob die E-Mail-Adresse dem Muster einer gültigen E-Mail-Adresse entspricht.
- **validate_phone(phone)**: Überprüft, ob die Telefonnummer dem Muster einer gültigen Telefonnummer entspricht.

### Funktionen zur Verwaltung von Kontakten

```python
def add_contact():
    data = load_data(CONTACTS_FILE)
    name = input("Name: ")
    address = input("Address: ")
    phone = input("Phone: ")
    email = input("Email: ")
    birthday = input("Birthday (YYYY-MM-DD): ")
    
    if not validate_email(email):
        print("Invalid email format")
        return
    if not validate_phone(phone):
        print("Invalid phone format")
        return
    
    contact = {
        "name": name,
        "address": address,
        "phone": phone,
        "email": email,
        "birthday": birthday
    }
    data.append(contact)
    save_data(data, CONTACTS_FILE)
    print("Contact added successfully")
```

- **add_contact()**: 
  - Lädt die vorhandenen Kontakte.
  - Fragt den Benutzer nach den Details des neuen Kontakts.
  - Validiert E-Mail-Adresse und Telefonnummer.
  - Fügt den neuen Kontakt zur Liste hinzu und speichert die aktualisierte Liste.

```python
def list_upcoming_birthdays():
    data = load_data(CONTACTS_FILE)
    days = int(input("Enter number of days: "))
    today = datetime.today()
    upcoming = []
    for contact in data:
        birthday = datetime.strptime(contact["birthday"], "%Y-%m-%d")
        this_year_birthday = birthday.replace(year=today.year)
        if 0 <= (this_year_birthday - today).days <= days:
            upcoming.append(contact)
    if not upcoming:
        print("No upcoming birthdays in the next", days, "days")
    else:
        for contact in upcoming:
            print(contact)
```

- **list_upcoming_birthdays()**:
  - Lädt die Kontakte.
  - Fragt den Benutzer nach der Anzahl der Tage, für die die Geburtstage angezeigt werden sollen.
  - Berechnet die Geburtstage, die in den nächsten Tagen anstehen, und zeigt sie an.

```python
def search_contacts():
    data = load_data(CONTACTS_FILE)
    query = input("Enter search query: ").strip().lower()
    if not query:
        print("No contacts found. Please provide a valid search query.")
        return

    results = [contact for contact in data if query in contact["name"].lower()]
    if results:
        print("Search results:")
        for result in results:
            print("Name:", result["name"])
            print("Address:", result["address"])
            print("Phone:", result["phone"])
            print("Email:", result["email"])
            print("Birthday:", result["birthday"])
            print()
    else:
        print("No contacts found with the name:", query)
```

- **search_contacts()**:
  - Lädt die Kontakte.
  - Fragt den Benutzer nach einem Suchbegriff.
  - Sucht nach Kontakten, deren Namen den Suchbegriff enthalten.
  - Zeigt die Suchergebnisse an.

```python
def edit_contact():
    data = load_data(CONTACTS_FILE)
    name = input("Enter contact name to edit: ").strip().lower()
    for contact in data:
        if contact["name"].lower() == name:
            contact["address"] = input(f"New address ({contact['address']}): ") or contact["address"]
            contact["phone"] = input(f"New phone ({contact['phone']}): ") or contact["phone"]
            contact["email"] = input(f"New email ({contact['email']}): ") or contact["email"]
            contact["birthday"] = input(f"New birthday ({contact['birthday']}): ") or contact["birthday"]
            save_data(data, CONTACTS_FILE)
            print("Contact updated successfully")
            return
    print("Contact not found")
```

- **edit_contact()**:
  - Lädt die Kontakte.
  - Fragt den Benutzer nach dem Namen des Kontakts, der bearbeitet werden soll.
  - Aktualisiert die Details des Kontakts und speichert die Änderungen.

```python
def delete_contact():
    data = load_data(CONTACTS_FILE)
    name = input("Enter contact name to delete: ").strip().lower()
    data = [contact for contact in data if contact["name"].lower() != name]
    save_data(data, CONTACTS_FILE)
    print("Contact deleted successfully")
```

- **delete_contact()**:
  - Lädt die Kontakte.
  - Fragt den Benutzer nach dem Namen des zu löschenden Kontakts.
  - Löscht den Kontakt und speichert die aktualisierte Liste.

### Funktionen zur Verwaltung von Notizen

```python
def add_note():
    data = load_data(NOTES_FILE)
    text = input("Note text: ")
    tags = input("Tags (comma-separated): ").split(",")
    note = {"text": text, "tags": [tag.strip() for tag in tags]}
    data.append(note)
    save_data(data, NOTES_FILE)
    print("Note added successfully")
```

- **add_note()**:
  - Lädt die Notizen.
  - Fragt den Benutzer nach dem Text der Notiz und den Tags.
  - Fügt die Notiz zur Liste hinzu und speichert die aktualisierte Liste.

```python
def search_notes():
    data = load_data(NOTES_FILE)
    query = input("Enter search query: ").strip().lower()
    if not query:
        print("No notes found. Please provide a valid search query.")
        return

    results = [note for note in data if query in note["text"].lower() or query in [tag.lower() for tag in note["tags"]]]
    if results:
        print("Search results:")
        for result in results:
            print(result)
    else:
        print("No notes found with the query:", query)
```

- **search_notes()**:
  - Lädt die Notizen.
  - Fragt den Benutzer nach einem Suchbegriff.
  - Sucht nach Notizen, die den Suchbegriff im Text oder in den Tags enthalten.
  - Zeigt die Suchergebnisse an.

```python
def edit_note():
    data = load_data(NOTES_FILE)
    note_text = input("Enter note text to edit: ").strip().lower()
    for note in data:
        if note["text"].lower() == note_text:
            note["text"] = input(f"New text ({note['text']}): ") or note["text"]
            note["tags"] = input(f"New tags (comma-separated) ({', '.join(note['tags'])}): ").split(",") or note["tags"]
            save_data(data, NOTES_FILE)
            print("Note updated successfully")
            return
    print("Note not found")
```

- **edit_note()**:
  - Lädt die Notizen.
  - Fragt den Benutzer nach dem Text der zu bearbeitenden Notiz.
  - Aktualisiert die Details der Notiz und speichert die Änderungen.

```python
def delete_note():
    data = load_data(NOTES_FILE)
    note_text = input("Enter note text to delete: ").strip().lower()
    data = [note for note in data if note["text"].lower() != note_text]
    save_data(data, NOTES_FILE)
    print("Note deleted successfully")
```

- **delete_note()**:
  - Lädt die Notizen.
  - Fragt den Benutzer nach dem Text der zu löschenden Notiz.
  - Löscht die Notiz und speichert die aktualisierte Liste.

### Hauptmenü und Hauptfunktion

```python
def main_menu():
    print("\nPersonal Assistant Menu:")
    print("1. Add Contact")
    print("2. List Upcoming Birthdays")
    print("3. Search Contact")


    print("4. Edit Contact")
    print("5. Delete Contact")
    print("6. Add Note")
    print("7. Search Note")
    print("8. Edit Note")
    print("9. Delete Note")
    print("10. Exit")
```

- **main_menu()**:
  - Zeigt das Hauptmenü des Programms an.

```python
def main():
    while True:
        main_menu()
        choice = input("Enter your choice: ")
        
        if choice == "1":
            add_contact()
        elif choice == "2":
            list_upcoming_birthdays()
        elif choice == "3":
            search_contacts()
        elif choice == "4":
            edit_contact()
        elif choice == "5":
            delete_contact()
        elif choice == "6":
            add_note()
        elif choice == "7":
            search_notes()
        elif choice == "8":
            edit_note()
        elif choice == "9":
            delete_note()
        elif choice == "10":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 10.")
```

- **main()**:
  - Zeigt das Hauptmenü an und wartet auf die Benutzereingabe.
  - Führt die entsprechende Funktion basierend auf der Benutzereingabe aus.
  - Beendet das Programm, wenn der Benutzer die Option `10` wählt.

```python
if __name__ == "__main__":
    main()
```

- Dies stellt sicher, dass das `main()`-Funktion nur ausgeführt wird, wenn das Skript direkt ausgeführt wird.

Mit diesen Erklärungen sollten Sie nun ein gutes Verständnis davon haben, 
wie das Programm funktioniert. Wenn Sie noch Fragen haben, stehe ich Ihnen gerne zur Verfügung!
